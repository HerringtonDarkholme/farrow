import type { ResponseOutput } from '.';
import { ResponseInfo, json, html, text, raw, redirect, stream, file, vary, cookie, cookies, header, headers, status, buffer, empty, attachment, custom, BodyMap } from './response';
declare type ToResponser<T extends ResponseInfoCreator> = (...args: Parameters<T>) => Responser;
declare type ResponseInfoCreator = (...args: any) => ResponseInfo;
export declare type Responser = {
    info: ResponseInfo;
    merge: (...responsers: Responser[]) => Responser;
    json: ToResponser<typeof json>;
    html: ToResponser<typeof html>;
    text: ToResponser<typeof text>;
    raw: ToResponser<typeof raw>;
    redirect: ToResponser<typeof redirect>;
    stream: ToResponser<typeof stream>;
    file: ToResponser<typeof file>;
    vary: ToResponser<typeof vary>;
    cookie: ToResponser<typeof cookie>;
    cookies: ToResponser<typeof cookies>;
    header: ToResponser<typeof header>;
    headers: ToResponser<typeof headers>;
    status: ToResponser<typeof status>;
    buffer: ToResponser<typeof buffer>;
    empty: ToResponser<typeof empty>;
    attachment: ToResponser<typeof attachment>;
    custom: ToResponser<typeof custom>;
};
export declare const toResponser: <T extends ResponseInfoCreator>(f: T, info: any) => ToResponser<T>;
export declare const createResponser: (info: any) => Responser;
declare const _default: Responser;
export default _default;
export declare const match: <T extends string | number | symbol>(type: T, f: (body: any) => any) => any;
