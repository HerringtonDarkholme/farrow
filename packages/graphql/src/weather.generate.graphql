type Query {
  getCityByName(name: String!, country: String, config: ConfigInput): City!
  getCityById(id: [String!], config: ConfigInput): [City!]!
  cityOrWeather: CityOrWeather!
}

"""City"""
type City {
  """City ID"""
  id: ID!

  """City name"""
  name: String!

  """Country of City"""
  country: String!

  """Coordinates of City"""
  coord: Coordinates!

  """Weather of City"""
  weather: Weather!
  upload: Upload!
}

type Coordinates {
  lon: Float!
  lat: Float!
}

type Weather {
  summary: Summary!
  temperature: Temperature!
  wind: Wind!
  clouds: Clouds!
  timestamp: Int!
}

type Summary {
  title: String!
  description: String!
  icon: String!
}

type Temperature {
  actual: Float!
  feelsLike: Float!
  min: Float!
  max: Float!
}

type Wind implements Test & Error {
  speed: Float!
  deg: Int!
}

interface Test {
  a: Int!
}

interface Error {
  message: String
}

"""Clouds"""
type Clouds {
  all: Int!
  visibility: Int!
  humidity: Int!
}

scalar Upload

input ConfigInput {
  units: Unit!
  lang: Language!
}

enum Unit {
  metric
  imperial
  kelvin
}

enum Language {
  af
  al
}

union CityOrWeather = City | Weather
